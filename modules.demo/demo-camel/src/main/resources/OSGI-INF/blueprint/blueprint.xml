<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.1.0"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd

  http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
  http://aries.apache.org/xmlns/jpa/v1.1.0 http://aries.apache.org/schemas/jpa/jpa_110.xsd">
    <!--<service id="enterpriseService" interface="com.daren.enterprise.api.biz.IEnterpriseBeanService">
        <bean class="com.daren.enterprise.core.biz.EnterpriseBeanServiceImpl">
            <property name="enterpriseBeanDao" ref="enterpriseBeanDao"/>
                </bean>
    </service>
    <reference id="enterpriseBeanDao" interface="com.daren.enterprise.api.dao.IEnterpriseBeanDao"/>-->
    <!--<reference id="connectionFactory" interface="javax.jms.ConnectionFactory" />

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="connectionFactory"/>
        &lt;!&ndash;<property name="transactionManager" ref="transactionManager"/>&ndash;&gt;
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <argument ref="jmsConfig"/>
        &lt;!&ndash;<property name="transactionManager" ref="transactionManager"/>&ndash;&gt;
    </bean>-->

    <!-- create a Camel ActiveMQ component to use, using the Spring bean style -->
    <!-- we use the vm protocol to communicate intra-jvm which is much faster than tcp -->

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL"
                          value="vm://localhost?broker.persistent=false&amp;broker.useJmx=false&amp;waitForStart=5000"/>
                <property name="userName" value="karaf"/>
                <property name="password" value="karaf"/>
            </bean>
        </property>
    </bean>

    <camelContext xmlns="http://camel.apache.org/schema/blueprint" id="simple">
        <!--<route>-->
        <!--<from uri="timer:simple?period=15000"/>
        <setBody>
            <simple>Hello World ${date:now:yyyy-MM-dd HH:mm:ss}</simple>
        </setBody>-->
        <!--<from uri="direct:start"/>
        <setHeader headerName="CamelHttpMethod">
            <constant>GET</constant>
        </setHeader>
        <to uri="http://192.168.1.112:9191/cxf/hazard"/>-->
        <!--<from uri="timer:simple?period=15000"/>
        <setHeader headerName="CamelHttpMethod" >
            <constant>GET</constant>
        </setHeader>
        <to uri="http://192.168.1.112:9191/cxf/hazard"/>

        &lt;!&ndash;<from uri="cxfrs://http://192.168.1.112:9191/cxf/hazard"/>&ndash;&gt;

        <to uri="activemq:queue:inbox"/>-->

        <!--</route>-->
        <!--<routeBuilder ref="jmsbuilder"/>-->

        <!-- Camel route to move messages from the ActiveMQ inbox to its outbox queue -->
        <!--<route id="inToOutRoute">
            <from uri="activemq:queue:inbox"/>


            <log message="Routing message from inbox to outbox queue with data ${body}"/>
            <to uri="activemq:queue:outbox"/>
        </route>-->
        <dataFormats>
            <json id="json" library="Jackson"/>
        </dataFormats>

        <route id="jpaTest" startupOrder="1">

            <!--<from uri="timer:simple?period=15000"/>-->
            <!--<from uri="timer:simple?period=5000&amp;repeatCount=1"/>-->
            <!--<from uri="direct:jpaTest"/>-->
            <from uri="jpa://cn.com.rexen.kalix.demo.camel.model.Person?consumer.delay=5000&amp;consumer.namedQuery=getAll&amp;consumeLockEntity=false"/>
            <process ref="processor"/>

            <!--<marshal ref="json">

            </marshal>-->
            <!--<to uri="log:out"/>-->
            <!--<log message="Routing message from inbox to outbox queue with data ${body}"/>-->
            <!--<convertBodyTo type="cn.com.rexen.kalix.demo.camel.model.NewPerson"/>-->
            <marshal ref="json"/>
            <to uri="activemq:queue:inbox?jmsMessageType=Text"/>
            <!--<to uri="jpa://cn.com.rexen.kalix.demo.camel.model.NewPerson"/>-->
            <!--<process ref="stopProcessor"/>-->
        </route>

        <route id="jpaReceive">
            <!--<from uri="timer:test?period=5000"/>-->
            <from uri="activemq:queue:inbox"/>
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="cn.com.rexen.kalix.demo.camel.model.NewPerson"/>
            </unmarshal>
            <!--<process ref="jpaProcessor"/>-->
            <to uri="jpa://cn.com.rexen.kalix.demo.camel.model.NewPerson"/>
        </route>
        <!-- <route id="control" startupOrder="2"  routePolicyRef="startPolicy">
            <from uri="timer:test?period=5000&amp;repeatCount=1"/>
            <setBody>
                <simple>Hello World</simple>
            </setBody>
            <bean ref="controllerBean"/>
        </route>-->


        <!--<route>
           <from uri="timer:simple?period=5000&amp;repeatCount=1"/>
            <setBody>
                <simple>dfdf</simple>
            </setBody>
           <to uri="direct:jpaTest"/>
       </route>-->


    </camelContext>

    <!--<bean id="startPolicy" class="org.apache.camel.routepolicy.quartz.SimpleScheduledRoutePolicy">
        <property name="routeStartDate" ref="date"/>
        <property name="routeStartRepeatCount" value="1"/>
        <property name="routeStartRepeatInterval" value="3000"/>
    </bean>-->

    <bean id="controllerBean" class="cn.com.rexen.kalix.demo.camel.ControllerBean">
        <property name="routeId" value="jpaTest"/>
    </bean>
    <bean id="stopProcessor" class="cn.com.rexen.kalix.demo.camel.StopProcessor">
        <property name="routeId" value="jpaTest"/>
    </bean>

    <bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
        <jpa:unit unitname="example-cm" property="entityManagerFactory"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <reference id="jtaTransactionManager" interface="javax.transaction.TransactionManager"/>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <argument ref="jtaTransactionManager"/>
    </bean>

    <bean id="processor" class="cn.com.rexen.kalix.demo.camel.JsonProcessor"/>
    <bean id="jpaProcessor" class="cn.com.rexen.kalix.demo.camel.JpaProcessor"/>
    <!--<bean id="jmsbuilder" class="cn.com.rexen.kalix.demo.camel.Jms2RestRoute"/>-->
</blueprint>

